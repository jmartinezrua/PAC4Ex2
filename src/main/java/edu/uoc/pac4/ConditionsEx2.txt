**Exercise 2 (5 points)**  
Before starting, you must:  

1. Open the PAC4Ex2 project in IntelliJ. In the `edu.uoc.pac4` package located in the `/src/test/java` directory, you will find the file with the unit tests we provide. Copy the `edu.uoc.pac4` package from the `/src/main/java` directory of Exercise 1 in this PEC4 after completing it.  

2. In this exercise, we extend the previous program by adding new classes, interfaces, and methods. The new UML class diagram is included in the zip file of the assignment statement under the name `PAC4Ex2.png`. It is essential to consult it often as it contains information, such as access modifiers for elements, that may not be mentioned in this statement.  

3. To provide a clear structure for the project, we include a screenshot showing all the classes, interfaces, and enumerations to be implemented within their respective packages. You must maintain this structure in your project to successfully execute the test suite:  

---

**Recommendation:** In this exercise, we will learn to use the LinkedList data structure, which allows storing elements in a linked list. You can research more about it in the official Java documentation:  
[LinkedList Documentation](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html).  

Next, we will describe each element in the class diagram and the previous screenshot:  

---

**Interface `Evaluable`**  
This interface declares the method signature for any class whose objects can be evaluated. It must be located in the `edu.uoc.pac4.activity` package.  

---

**Class `ActivityException`**  
This class must define all attributes and constructors shown in the UML diagram and inherit from the `Exception` class, as in the previous exercise.  

---

**Class `Activity`**  
This abstract class cannot be instantiated; instead, its child classes must be instantiated. Thus, it should be declared as abstract. Additionally, it represents an activity that can be executed within the DSLab application. For its implementation, follow the UML diagram and consider these points:  

- The `Activity` class must implement the `Cloneable` interface and include the `clone` method. You can leave its signature for now and implement it later.  
- This class includes an attribute that represents a list of executions to store all the executions of this activity. Use the `LinkedList` data structure for this attribute.  
- **`setName:`** If the `name` parameter is `null`, empty, or consists only of whitespace, the method must throw an `ActivityException` with the message `[ERROR] Name cannot be null, empty or blank`. Otherwise, it should assign the activity name after trimming leading and trailing whitespaces.  
- **`setDescription:`** If the `description` parameter is `null`, the method should assign an empty string. Otherwise, it should assign the trimmed description.  
- **`addExecution:`** This method adds the given `execution` parameter to the end of the linked list of executions.  
- **`getExecutions:`** This method returns a linked list containing all the executions of this instance (i.e., the `executions` attribute).  
- **`clone:`** This method creates a copy of the activity, including all attributes except for the execution list, which should be empty in the copy. Use the `Object` class's `clone` method.  
- **`toString:`** This method returns a string with the activity information in the format:  
  ```
  name: description Total executions: n
  ```
  where `n` is the number of executions of this activity.  

---

**Class `ActivityProgramming`**  
This abstract class inherits from the `Activity` class, allowing access to all its public and protected attributes and methods. Implementation considerations:  

- **`setWeight:`** If the weight of this activity in the final grade is outside the range `[0, 100]`, it should be adjusted to fit within this range before being assigned.  
- **`toString:`** This method returns programming activity information, including inherited activity details, in the format:  
  ```
  name: description Total executions: n (weight%)
  ```


**Enum `ActivityQuizType`**  
This enumeration should be implemented following the UML specifications. Each literal must have the following descriptions:  

- `MULTIPLE_CHOICE` → Collection of questions with multiple choices  
- `TRUE_FALSE` → Collection of questions with true or false answers  
- `SHORT_ANSWER` → Collection of questions with short answers  

Additionally:  

- **`toString:`** This method must return the description of the literal representing the instance.  

---

**Class `ActivityQuiz`**  
This class inherits from the `Activity` class, granting access to all its public and protected attributes and methods. Unlike the parent class, this class is not abstract, so it can be instantiated. Implementation considerations:  

- **`toString:`** This method returns activity information followed by a description of the quiz type. It should follow this format:  
  ```
  name: description Total executions: n typeDescription
  ```

---

**Class `ActivityProgrammingCpp`**  
Implementation considerations:  

- **`setCompiler:`** If the `compiler` parameter is `null`, an empty string, or consists only of whitespaces, the method must throw an `ActivityException` with the message `[ERROR] Compiler cannot be null, empty or blank`. Otherwise, it should assign the compiler name after trimming leading and trailing whitespaces.  
- **`setStandard:`** If the `standard` parameter is `null`, an empty string, or consists only of whitespaces, the method must throw an `ActivityException` with the message `[ERROR] Standard cannot be null, empty or blank`. Otherwise, it should assign the standard after trimming leading and trailing whitespaces.  
- **`toString:`** This method returns information about a C++ programming activity in the following format:  
  ```
  [C++] name: description Total executions: n (weight%) (compiler, standard)
  ```

---

**Class `ActivityProgrammingJava`**  
Implementation considerations:  

- **`setJdkVersion:`** If the `jdkVersion` parameter is `null` or does not represent a valid version, the method must throw an `ActivityException` with the message `[ERROR] JDK version must be in the format x.y.z where y and z are optional`. Otherwise, it should assign the JDK version. A valid JDK version consists only of numbers and dots in a format like `x.y.z`, where `y` and `z` are optional.  
- **`setGradleVersion:`** If the `gradleVersion` parameter is `null` or does not represent a valid version, the method must throw an `ActivityException` with the message `[ERROR] Gradle version must be in the format x.y.z where z is optional`. Otherwise, it should assign the Gradle version. A valid Gradle version consists only of numbers and dots in a format like `x.y.z`, where `z` is optional.  
- **`toString:`** This method returns information about a Java programming activity in the following format:  
  ```
  [Java] name: description Total executions: n (weight%) (jdk-jdkVersion, gradle vgradle)
  ```

---

**Class `ActivityProgrammingPython`**  
Implementation considerations:  

- **`setPythonVersion:`** If the `pythonVersion` parameter is `null` or does not represent a valid version, the method must throw an `ActivityException` with the message `[ERROR] Python version must be in the format x.y.z where z is optional`. Otherwise, it should assign the Python version. A valid Python version consists only of numbers and dots in a format like `x.y.z`, where `z` is optional.  
- **`toString:`** This method returns information about a Python programming activity in the following format:  
  ```
  [Python] name: description Total executions: n (weight%) (pythonVersion, with virtualenv)
  ```
  The string `, with virtualenv` is appended only if the activity requires execution in a virtual environment (`usesVirtualEnv`).  

---

**Class `UserException`**  
This class must define all attributes and constructors shown in the UML diagram and inherit from the `Exception` class, as in the previous exercise. It must be located in the `edu.uoc.pac4.user` package.  

---

**Class `User`**  
This abstract class cannot be instantiated. Implementation considerations:  

- **`setEmail:`** If the `email` parameter is `null` or not valid, the method must throw a `UserException` with the message `[ERROR] The email must start with any character end with @uoc.edu`. Otherwise, it should assign the email. A valid email contains any character before the `@` symbol and ends with `@uoc.edu`.  
- **`setName:`** If the `name` parameter is `null`, empty, or consists only of whitespaces, the method must throw a `UserException` with the message `[ERROR] Name cannot be null, empty or blank`. Otherwise, it should assign the name after trimming whitespaces.  
- **`setSurname:`** If the `surname` parameter is `null`, it should assign an empty string. Otherwise, it should assign the trimmed surname.  
- **`toString:`** This method returns user information in the format:  
  ```
  name surname (email)
  ```

---

**Class `Student`**  
This class inherits from the `User` class and includes an attribute to store executions performed in the application using a `LinkedList`. Implementation considerations:  

- **`addExecution:`** Adds the `execution` parameter to the end of the executions list.  
- **`getExecutions:`** Returns a linked list of all executions of this instance.  
- **`getLastExecutionSubmitted:`** Returns the last execution added to the executions list.  
- **`toString:`** Returns student information in the format:  
  ```
  [STUDENT] name surname (email) Total executions: n
  ```
  where `n` is the number of executions performed by the student.  

---

**Class `Professor`**  
This class inherits from the `User` class and includes an attribute to store created activities using a `LinkedList`. Implementation considerations:  

- **`addActivity:`** Adds the `activity` parameter to the end of the activities list.  
- **`getActivities:`** Returns a linked list of all activities of this instance.  
- **`toString:`** Returns professor information in the format:  
  ```
  [PROFESSOR] name surname (email) Total activities: n
  ```
  where `n` is the number of activities created by the professor.  

---

**Class `Execution`**  
This class is created when a user submits an entry, and it is executed in the application for scoring. Upon creation, the instance (`this`) must be added to the executions list in the `User` and `Activity` classes. Implementation considerations:  

- **`setScore:`** If the `score` parameter is outside the range `[0, 10]`, normalize it to fit within this range before assigning it.  
- **`toString:`** Returns execution information in the format:  
  ```
  [STUDENT] name surname (email) Total executions: n activityName: activityDescription Total executions: k typeDescription Score: score
  ```
  where `n` is the student's execution count and `k` is the activity's execution count.  

---

**Class `DSLab`**  
This class has been slightly modified from the previous exercise with 5 new methods and 3 new attributes, all of which must be of type `LinkedList`. Implementation considerations:  

- **`addUser:`** Adds the `user` parameter to the end of the users list, which may include both professors and students.  
- **`getUsers:`** Returns a linked list of all users in the application.  
- **`addActivity:`** Adds the `activity` parameter to the activities list. If the activity is evaluable, also adds it to the evaluable activities list.  
- **`getActivities:`** Returns a linked list of all activities in the application.  
- **`getEvaluableActivities:`** Returns a linked list of all evaluable activities in the application.  

---

**Evaluation Criteria (5 points)**  
- **2.5 points:** Pass all `testMinimum` cases (99 tests).  
- **2.5 points:** Proportional score for additional `testAdvanced` cases (33 tests). Each test contributes 0.076 points.  
- **Note:** Up to 1 point may be deducted for code quality issues.  

--- 

Let me know if you need further clarification!
