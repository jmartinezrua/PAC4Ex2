@startuml

' Exceptions
class DSLabException {
    + INVALID_NAME: String = "[ERROR] Name cannot be null, empty, or blank"
    + DSLabException(message: String)
}

class UniversityException {
    + INVALID_DESCRIPTION: String = "[ERROR] Description cannot be null"
    + INVALID_NAME: String = "[ERROR] Name cannot be null, empty, or blank"
    + INVALID_VERSION_MAJOR: String = "[ERROR] Major version cannot be negative"
    + INVALID_ABBREVIATION: String = "[ERROR] Abbreviation must contain 2-6 uppercase letters"
    + INVALID_VERSION_MINOR: String = "[ERROR] Minor version cannot be negative"
    + INVALID_FOUNDATION_DATE: String = "[ERROR] Foundation date cannot be null or in the future"
    + INVALID_VERSION_PATCH: String = "[ERROR] Patch version cannot be negative"
    + INVALID_ADDRESS: String = "[ERROR] Address cannot be null"
    + NO_ENOUGH_CPU: String = "[ERROR] This server does not have enough CPU"
    + INVALID_WEBSITE: String = "[ERROR] Website must be a valid URL"
    + UNIVERSITY_NULL: String = "[ERROR] University cannot be null"
    + UniversityException(message: String)
}

class UserException {
    + INVALID_EMAIL: String = "[ERROR] The email must start with any character and end with @uoc.edu"
    + INVALID_NAME: String = "[ERROR] Name cannot be null, empty, or blank"
    + UserException(message: String)
}

class ActivityException {
    + INVALID_NAME: String = "[ERROR] Name cannot be null, empty, or blank"
    + INVALID_CPP_COMPILER: String = "[ERROR] Compiler cannot be null, empty, or blank"
    + INVALID_CPP_STANDARD: String = "[ERROR] Standard cannot be null, empty, or blank"
    + INVALID_JDK_VERSION: String = "[ERROR] JDK version must be in the format x.y.z where y and z are optional"
    + INVALID_GRADLE_VERSION: String = "[ERROR] Gradle version must be in the format x.y.z where z is optional"
    + INVALID_PYTHON_VERSION: String = "[ERROR] Python version must be in the format x.y.z where z is optional"
    + ActivityException(message: String)
}

' Main Classes
class DSLab {
    - name: String
    - description: String
    - versionMajor: int
    - versionMinor: int
    - versionPatch: int
    - cpu: long
    - university: University
    - status: DSLabStatus
    - users: LinkedList<User>
    - activities: LinkedList<Activity>
    - evaluableActivities: LinkedList<Evaluable>
    + DSLab(name: String, description: String, versionMajor: int, versionMinor: int, versionPatch: int, cpu: long, university: University)
    + getName(): String
    + setName(name: String)
    + getDescription(): String
    + setDescription(description: String)
    + getVersionMajor(): int
    + setVersionMajor(versionMajor: int)
    + getVersionMinor(): int
    + setVersionMinor(versionMinor: int)
    + getVersionPatch(): int
    + setVersionPatch(versionPatch: int)
    + getCpu(): long
    + setCpu(cpu: long)
    + getUniversity(): University
    + setUniversity(university: University)
    + getStatus(): DSLabStatus
    + setStatus(status: DSLabStatus)
    + addUser(user: User)
    + getUsers(): LinkedList<User>
    + addActivity(activity: Activity)
    + getActivities(): LinkedList<Activity>
    + getEvaluableActivities(): LinkedList<Evaluable>
    + toString(): String
}

class University {
    - name: String
    - abbreviation: String
    - foundationDate: LocalDate
    - address: String
    - website: String
    + University(name: String, abbreviation: String, foundationDate: LocalDate, address: String, website: String)
    + getName(): String
    + setName(name: String)
    + getAbbreviation(): String
    + setAbbreviation(abbreviation: String)
    + getFoundationDate(): LocalDate
    + setFoundationDate(foundationDate: LocalDate)
    + getAddress(): String
    + setAddress(address: String)
    + getWebsite(): String
    + setWebsite(website: String)
    + toString(): String
}

' User-related classes
class User {
    - email: String
    - name: String
    - surname: String
    + User(email: String, name: String, surname: String)
    + getEmail(): String
    + setEmail(email: String)
    + getName(): String
    + setName(name: String)
    + getSurname(): String
    + setSurname(surname: String)
    + toString(): String
}

class Professor {
    - activities: LinkedList<Activity>
    + Professor(email: String, name: String, surname: String)
    + addActivity(activity: Activity)
    + getActivities(): LinkedList<Activity>
    + toString(): String
}

class Student {
    - executions: LinkedList<Execution>
    + Student(email: String, name: String, surname: String)
    + addExecution(execution: Execution)
    + getExecutions(): LinkedList<Execution>
    + getLastExecutionSubmitted(): Execution
    + toString(): String
}

' Activity-related classes
class Activity {
    - name: String
    - description: String
    - executions: LinkedList<Execution>
    + Activity(name: String, description: String)
    + getName(): String
    + setName(name: String)
    + getDescription(): String
    + setDescription(description: String)
    + addExecution(execution: Execution)
    + getExecutions(): LinkedList<Execution>
    + clone(): Object
    + toString(): String
}

class Execution {
    - student: Student
    - activity: Activity
    - score: double
    + Execution(score: double, student: Student, activity: Activity)
    + getScore(): double
    + setScore(score: double)
    + getStudent(): Student
    + setStudent(student: Student)
    + getActivity(): Activity
    + setActivity(activity: Activity)
    + toString(): String
}

class ActivityQuiz extends Activity {
    - type: ActivityQuizType
    + ActivityQuiz(name: String, description: String, type: ActivityQuizType)
    + getType(): ActivityQuizType
    + setType(type: ActivityQuizType)
    + toString(): String
}

class ActivityProgramming extends Activity {
    - weight: double
    + ActivityProgramming(name: String, description: String, weight: double)
    + getWeight(): double
    + setWeight(weight: double)
    + toString(): String
}

class ActivityProgrammingCpp extends ActivityProgramming {
    - compiler: String
    - standard: String
    + ActivityProgrammingCpp(name: String, description: String, weight: double, compiler: String, standard: String)
    + getCompiler(): String
    + setCompiler(compiler: String)
    + getStandard(): String
    + setStandard(standard: String)
    + toString(): String
}

class ActivityProgrammingJava extends ActivityProgramming {
    - jdkVersion: String
    - gradleVersion: String
    + ActivityProgrammingJava(name: String, description: String, weight: double, jdkVersion: String, gradleVersion: String)
    + getJdkVersion(): String
    + setJdkVersion(jdkVersion: String)
    + getGradleVersion(): String
    + setGradleVersion(gradleVersion: String)
    + toString(): String
}

class ActivityProgrammingPython extends ActivityProgramming {
    - pythonVersion: String
    - usesVirtualEnv: boolean
    + ActivityProgrammingPython(name: String, description: String, weight: double, pythonVersion: String, usesVirtualEnv: boolean)
    + getPythonVersion(): String
    + setPythonVersion(pythonVersion: String)
    + getUsesVirtualEnv(): boolean
    + setUsesVirtualEnv(usesVirtualEnv: boolean)
    + toString(): String
}

' Interfaces
interface Evaluable {
    + toString(): String
}

' Enums
enum DSLabStatus {
    ACTIVE
    INACTIVE
    MAINTENANCE
}

enum ActivityQuizType {
    MULTIPLE_CHOICE
    TRUE_FALSE
    SHORT_ANSWER
}

' Relationships
DSLab "1" -- "1" University
DSLab "1" -- "*" User
DSLab "1" -- "*" Activity
DSLab "1" -- "*" Evaluable
User "1" -- "*" Execution
Activity "1" -- "*" Execution
Professor --|> User
Student --|> User

@enduml